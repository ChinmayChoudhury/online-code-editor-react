{"version":3,"sources":["Components/FileExplorer.js","Components/CodeEditorHTML.js","Components/LiveResult.js","Components/CodeEditorCss.js","Components/CodeEditorJs.js","Hooks/useLocalCode.js","App.js","index.js"],"names":["FileExplorer","props","handleClick","getID","state","isHtml","isCss","isJs","className","to","onClick","this","Component","CodeEditorHTML","handleCodeChange","editor","data","value","onCodeChange","code","onBeforeChange","options","lineWrapping","mode","lineNumbers","theme","LiveResult","htmlsrc","csssrc","jssrc","newProps","setTimeout","setState","height","width","marginHeight","marginWidth","frameBorder","sandbox","srcDoc","CodeEditor","useLocalCode","key","initValue","finalKey","useState","jsonCode","localStorage","getItem","JSON","parse","val","setVal","useEffect","setItem","stringify","App","htmlcode","setHtmlcode","csscode","setCsscode","jscode","setJscode","console","log","exact","path","codelanguage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAEqBA,E,kDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IASVC,YAAc,WACV,EAAKD,MAAME,SARX,EAAKC,MAAO,CACRC,QAAQ,EACRC,OAAO,EACPC,MAAM,GANI,E,0CAclB,WACI,OACI,sBAAKC,UAAU,UAAf,UACI,mBAAGA,UAAU,QAAb,4BAAuC,gDAEvC,cAAC,IAAD,CAAMC,GAAG,IAAT,SACI,wBAAQD,UAAU,WAAlB,oBACG,gDACP,cAAC,IAAD,CAAMC,GAAG,OAAT,SACI,wBAAQD,UAAU,WAAlB,mBACG,gDACP,cAAC,IAAD,CAAMC,GAAG,cAAT,SACA,wBAAQD,UAAU,WAAlB,kBACO,gDACP,wBAAQA,UAAU,WAAWE,QAASC,KAAKT,YAA3C,kBAAqE,uD,GA7B3CU,a,wCCMrBC,E,kDACjB,WAAYZ,GAAO,IAAD,8BACd,cAAMA,IAMVa,iBAAmB,SAACC,EAAQC,EAAMC,GAE9B,EAAKhB,MAAMiB,aAAaD,IAPxB,EAAKb,MAAQ,CACTe,KAAK,wBAHK,E,qDAWlB,c,oBAIA,WACI,OACI,sBAAKX,UAAU,oBAAf,UAEI,mBAAGA,UAAU,eAAb,+BACA,cAAC,aAAD,CACIY,eAAgBT,KAAKG,iBACrBG,MAASN,KAAKV,MAAMgB,MACpBI,QAAW,CACPC,cAAe,EACfC,KAAM,MACNC,aAAc,EACdC,MAAO,YAEXjB,UAAY,uB,GA9BYI,aCNvBc,E,kDACjB,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IACDG,MAAQ,CACTe,KAAK,SAAS,EAAKlB,MAAM0B,QAAQ,UAAU,EAAK1B,MAAM2B,OAAO,mBAAmB,EAAK3B,MAAM4B,MAAM,qBAHvF,E,6DAalB,SAA0BC,GAAU,IAAD,OACfC,YAAW,WACvB,EAAKC,SAAS,CAACb,KAAK,SAAUW,EAASH,QAAS,UAAUG,EAASF,OAAO,mBAAmBE,EAASD,MAAM,wBAE9G,O,oBAIN,WACI,OACI,qBAAKrB,UAAU,wBAAf,SACI,wBACIyB,OAAO,OACPC,MAAQ,OACRC,aAAa,IACbC,YAAc,IACdC,YAAY,IACZC,QAAQ,gBACRC,OAAU5B,KAAKP,MAAMe,a,GAhCDP,aCMnB4B,E,kDACjB,WAAYvC,GAAO,IAAD,8BACd,cAAMA,IAMVa,iBAAmB,SAACC,EAAQC,EAAMC,GAE9B,EAAKhB,MAAMiB,aAAaD,IAPxB,EAAKb,MAAQ,CACTe,KAAK,2CAHK,E,qDAWlB,c,oBAIA,WACI,OACI,sBAAKX,UAAU,oBAAf,UAEI,mBAAGA,UAAU,eAAb,6BACA,cAAC,aAAD,CACIY,eAAgBT,KAAKG,iBACrBG,MAASN,KAAKV,MAAMgB,MACpBI,QAAW,CACPC,cAAe,EACfC,KAAM,MACNC,aAAc,EACdC,MAAO,YAEXjB,UAAY,uB,GA9BQI,aCAnB4B,E,kDACjB,WAAYvC,GAAO,IAAD,8BACd,cAAMA,IAMVa,iBAAmB,SAACC,EAAQC,EAAMC,GAE9B,EAAKhB,MAAMiB,aAAaD,IAPxB,EAAKb,MAAQ,CACTe,KAAK,uBAHK,E,qDAWlB,c,oBAIA,WACI,OACI,sBAAKX,UAAU,oBAAf,UAEI,mBAAGA,UAAU,eAAb,mCACA,cAAC,aAAD,CACIY,eAAgBT,KAAKG,iBACrBG,MAASN,KAAKV,MAAMgB,MACpBI,QAAW,CACPC,cAAe,EACfC,KAAM,aACNC,aAAc,EACdC,MAAO,YAEXjB,UAAY,uB,GA9BQI,aCJzB,SAAS6B,EAAaC,EAAKC,GACtC,IAAMC,EAFQ,8BAEeF,EAE7B,EAAsBG,oBAAS,WAC3B,IAAMC,EAAWC,aAAaC,QAAQJ,GAEtC,OAAe,MAAXE,EAAwBG,KAAKC,MAAMJ,GACd,oBAAdH,EACAA,IAEAA,KAPf,mBAAOQ,EAAP,KAAYC,EAAZ,KAcA,OAHAC,qBAAU,WACNN,aAAaO,QAAQV,EAAUK,KAAKM,UAAUJ,MAC/C,CAACP,EAAUO,IAEX,CAACA,EAAKC,GCVE,SAASI,IAAM,IAY5B,EAAgCf,EAAa,WAAY,IAAzD,mBAAOgB,EAAP,KAAiBC,EAAjB,KACA,EAA8BjB,EAAa,UAAU,IAArD,mBAAOkB,EAAP,KAAgBC,EAAhB,KACA,EAA4BnB,EAAa,SAAS,IAAlD,mBAAOoB,EAAP,KAAeC,EAAf,KAyBE,OACI,cAAC,IAAD,UACF,sBAAKtD,UAAU,MAAf,UACE,cAAC,EAAD,CAAcL,MAfA,WAClB,IAAIgB,EAAO,eAAgBsC,EAAW,iBAAiBE,EAAQ,mBAAmBE,EAAO,oBACzFE,QAAQC,IAAI7C,MAcR,sBAAKX,UAAU,YAAf,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOyD,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,CACEC,aAAe,GAGflD,MAASwC,EACTvC,aAAgBwC,MAGpB,cAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,OAAlB,SACE,cAAC,EAAD,CACEC,aAAe,GAGflD,MAAS0C,EACTzC,aAAgB0C,MAGpB,cAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,cAAlB,SACE,cAAC,EAAD,CACEC,aAAe,GAGflD,MAAS4C,EACT3C,aAAgB4C,SAIxB,qBAAKtD,UAAU,cACf,cAAC,EAAD,CAAamB,QAAW8B,EAAU7B,OAAU+B,EAC1C9B,MAASgC,YCjFnBO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.dda30f35.chunk.js","sourcesContent":["import React, {useState, Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nexport default class FileExplorer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        //not using this right now\r\n        this.state= {\r\n            isHtml: false,\r\n            isCss: false,\r\n            isJs: false\r\n        }\r\n    }\r\n\r\n    handleClick = () =>{\r\n        this.props.getID();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"fileexp\">\r\n                <p className=\"title\">FileExplorer: </p><span>&nbsp;&nbsp;&nbsp;</span>\r\n                \r\n                <Link to=\"/\" >\r\n                    <button className=\"cust-btn\">HTML</button>\r\n                </Link><span>&nbsp;&nbsp;&nbsp;</span>\r\n                <Link to=\"/css\" >\r\n                    <button className=\"cust-btn\">CSS</button>    \r\n                </Link><span>&nbsp;&nbsp;&nbsp;</span>\r\n                <Link to=\"/javascript\" >\r\n                <button className=\"cust-btn\">JS</button>\r\n                </Link><span>&nbsp;&nbsp;&nbsp;</span>\r\n                <button className=\"cust-btn\" onClick={this.handleClick}>Save</button><span>&nbsp;&nbsp;&nbsp;</span>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n","import React, { useState, Component } from 'react'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\n\r\nimport { Controlled as CodeEditorr} from 'react-codemirror2'\r\nexport default class CodeEditorHTML extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            code:'//Put your code here'\r\n        }\r\n    }\r\n    \r\n    handleCodeChange = (editor, data, value)=>{\r\n        // this.setState({code:value});\r\n        this.props.onCodeChange(value);\r\n    }\r\n    componentDidMount(){\r\n        // Prism.highlightAll();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"editor split_left\">\r\n                {/* hello */}\r\n                <p className='editor-title'>index.html (HTML)</p>\r\n                <CodeEditorr\r\n                    onBeforeChange={this.handleCodeChange}\r\n                    value = {this.props.value}\r\n                    options = {{\r\n                        lineWrapping : true,\r\n                        mode: \"xml\",\r\n                        lineNumbers : true,\r\n                        theme: 'material',\r\n                    }}\r\n                    className = \"code-editor\"\r\n                    \r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {useState, useEffect, Component } from 'react'\r\n\r\nexport default class LiveResult extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            code:\"<html>\"+this.props.htmlsrc+\"<style>\"+this.props.csssrc+\"</style><script>\"+this.props.jssrc+\"</script></html>\"\r\n            \r\n        }\r\n\r\n    }\r\n    // sourceFile = this.props.htmlsrc;\r\n    // state = {\r\n    //     htmlsrc: \"<html>\"+this.props.htmlsrc+\"</html>\"\r\n    // }\r\n    \r\n    componentWillReceiveProps(newProps){\r\n        const timeout = setTimeout(()=>{\r\n            this.setState({code:\"<html>\" +newProps.htmlsrc +\"<style>\"+newProps.csssrc+\"</style><script>\"+newProps.jssrc+\"</script></html>\"})\r\n\r\n        },250)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"outputbox split_right\">\r\n                <iframe\r\n                    height=\"100%\"\r\n                    width = \"100%\"\r\n                    marginHeight=\"0\"\r\n                    marginWidth = \"0\"\r\n                    frameBorder=\"0\"\r\n                    sandbox=\"allow-scripts\"\r\n                    srcDoc = {this.state.code}\r\n\r\n                />\r\n                    \r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState, Component } from 'react'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\n\r\nimport { Controlled as CodeEditorr} from 'react-codemirror2'\r\nexport default class CodeEditor extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            code:'//Put This is css editor your code here'\r\n        }\r\n    }\r\n    \r\n    handleCodeChange = (editor, data, value)=>{\r\n        // this.setState({code:value});\r\n        this.props.onCodeChange(value);\r\n    }\r\n    componentDidMount(){\r\n        // Prism.highlightAll();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"editor split_left\">\r\n                {/* hello */}\r\n                <p className=\"editor-title\">index.css (CSS)</p>\r\n                <CodeEditorr\r\n                    onBeforeChange={this.handleCodeChange}\r\n                    value = {this.props.value}\r\n                    options = {{\r\n                        lineWrapping : true,\r\n                        mode: \"css\",\r\n                        lineNumbers : true,\r\n                        theme: 'material',\r\n                    }}\r\n                    className = \"code-editor\"\r\n                    \r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState, Component } from 'react'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\n\r\nimport { Controlled as CodeEditorr} from 'react-codemirror2'\r\nexport default class CodeEditor extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            code:'//This is js editor'\r\n        }\r\n    }\r\n    \r\n    handleCodeChange = (editor, data, value)=>{\r\n        // this.setState({code:value});\r\n        this.props.onCodeChange(value);\r\n    }\r\n    componentDidMount(){\r\n        // Prism.highlightAll();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"editor split_left\">\r\n                {/* hello */}\r\n                <p className=\"editor-title\">index.js (Javascript)</p>\r\n                <CodeEditorr\r\n                    onBeforeChange={this.handleCodeChange}\r\n                    value = {this.props.value}\r\n                    options = {{\r\n                        lineWrapping : true,\r\n                        mode: \"javascript\",\r\n                        lineNumbers : true,\r\n                        theme: 'material',\r\n                    }}\r\n                    className = \"code-editor\"\r\n                    \r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import {useEffect, useState} from 'react'\r\n\r\n\r\nconst PREFIXKEY = 'online-code-editor-chinmay-'\r\nexport default function useLocalCode(key, initValue) {\r\n    const finalKey = PREFIXKEY + key\r\n\r\n    const [val, setVal] = useState(()=>{\r\n        const jsonCode = localStorage.getItem(finalKey)\r\n\r\n        if (jsonCode!= null) return JSON.parse(jsonCode)\r\n        if (typeof initValue === 'function'){\r\n            return initValue()\r\n        }else{\r\n            return initValue\r\n        }\r\n    })\r\n\r\n    useEffect(()=>{\r\n        localStorage.setItem(finalKey, JSON.stringify(val))\r\n    }, [finalKey, val])\r\n    return (\r\n       [val, setVal]\r\n    )\r\n}\r\n","import './App.css';\nimport React, { useState, Component } from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport FileExplorer from './Components/FileExplorer';\nimport CodeEditorHTML from './Components/CodeEditorHTML';\nimport LiveResults from './Components/LiveResult';\nimport CodeEditorCss from './Components/CodeEditorCss';\nimport CodeEditorJs from './Components/CodeEditorJs';\nimport useLocalCode from './Hooks/useLocalCode';\n\n\n\nexport default function App(){\n  \n  // constructor(props){\n  //   super(props)\n  //   this.state = {\n  //     htmlcode:useLocalCode('htmlcode', ''),\n  //     csscode: '',\n  //     jscode:'',\n  //     sourceCode:''\n  //   }\n  // }\n\n  const [htmlcode, setHtmlcode] = useLocalCode('htmlcode', '');\n  const [csscode, setCsscode] = useLocalCode('csscode','');\n  const [jscode, setJscode] = useLocalCode('jscode','');\n  \n  const setHTMLCode = (val) =>{\n    this.setState({htmlcode: val})\n  }\n  const setCSSCode = (val) =>{\n    this.setState({csscode: val})\n  }\n\n  const setJSCode = (val)=>{\n    this.setState({jscode: val})\n  }\n\n  const getPasteBinID=()=>{\n    let code = \"<html><body>\"+ htmlcode + \"</body><style>\"+csscode+\"</style><script>\"+jscode+\"</script></html>\";\n    console.log(code);\n    // fetch()\n  }\n\n  // componentDidUpdate(){\n  //   this.setState({sourceCode: \"<html>\"+this.state.htmlcode+\"</html>\"})\n  // }\n  // sourceCode = \"<html><body>\"+this.state.htmlcode+\"</body><style>\"+this.state.csscode+\"</style><script>\"+this.state.jscode+\"</script></html>\";\n  // render(){\n      \n    return (\n        <BrowserRouter>\n      <div className=\"App\">\n        <FileExplorer getID = {getPasteBinID}/>\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/\">\n              <CodeEditorHTML\n                codelanguage = \"\"\n                // value = {this.state.htmlcode}\n                // onCodeChange = {this.setHTMLCode}\n                value = {htmlcode}\n                onCodeChange = {setHtmlcode}\n              />\n            </Route>\n            <Route exact path=\"/css\">\n              <CodeEditorCss\n                codelanguage = \"\"\n                // value = {this.state.csscode}\n                // onCodeChange = {this.setCSSCode}\n                value = {csscode}\n                onCodeChange = {setCsscode}\n              />\n            </Route>\n            <Route exact path=\"/javascript\">\n              <CodeEditorJs\n                codelanguage = \"\"\n                // value = {this.state.jscode}\n                // onCodeChange = {this.setJSCode}\n                value = {jscode}\n                onCodeChange = {setJscode}\n              />\n            </Route>\n          </Switch>\n        <div className=\"split_bar\"></div>\n        <LiveResults htmlsrc = {htmlcode} csssrc = {csscode} \n          jssrc = {jscode}\n        />\n        </div>\n      </div>\n        </BrowserRouter>\n    );\n  // }\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './Styles/pagestyle.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}